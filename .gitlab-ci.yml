stages:
  - test
  - build
  - deploy
  - cleanup

test:
  stage: test
  image: elixir:latest

  services:
    - postgres:latest

  variables:
    POSTGRES_DB: "webapp_test"
    POSTGRES_HOST: "postgres"
    POSTGRES_USER: "postgres"
    POSTGRES_PASSWORD: "postgres"
    MIX_ENV: "test"

  before_script:
    - apt-get update && apt-get -y install postgresql-client
    - mix local.hex --force
    - mix local.rebar --force
    - mix deps.get
    - mix ecto.create
    - mix ecto.migrate

  script:
    - mix test
    - mix coveralls
    - mix credo suggest --mute-exit-status

build_docker_image:
  stage: build
  image: docker:latest
  variables:
    DOCKER_HOST: tcp://docker:2375/
    DOCKER_DRIVER: overlay2
    REGISTRY_PATH: registry.gitlab.com/runhyve/webapp
    IMAGE_TAG: "$REGISTRY_PATH:$CI_COMMIT_REF_SLUG"
  services:
  - name: docker:dind
    entrypoint: ["env", "-u", "DOCKER_HOST"]
    command: ["dockerd-entrypoint.sh"]
  before_script:
  - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN $REGISTRY_PATH
  script:
  - docker build -t $IMAGE_TAG --build-arg $SECRET_KEY_BASE -f Dockerfile.prod .
  - docker push $IMAGE_TAG

build_jail_image:
  stage: build
  tags:
  - freebsd
  script:
  - sudo ./build_iocage.sh
  - ./tools/jailer images
  artifacts:
    paths:
    - /zpool/iocage/images/*.zip

cleanup_jail_images:
  stage: cleanup
  tags:
  - freebsd
  script:
  - find /zpool/iocage/images -type f -delete -name '*.zip'


deploy_demo:
  stage: deploy
  image: ubuntu:18.04
  only:
    - master

  variables:
    GIGALIXIR_APP_NAME: "welltodo-normal-hen"

  environment:
    name: demo
    url: https://demo.runhyve.app
  
  script:
    - apt-get update && apt-get install -y git
    - git remote add gigalixir https://$GIGALIXIR_EMAIL:$GIGALIXIR_API_KEY@git.gigalixir.com/$GIGALIXIR_APP_NAME.git || true
    - git push -f gigalixir HEAD:refs/heads/master

deploy-production:
  image: ubuntu:18.04
  stage: deploy
  environment: 
    name: production
    url: https://panel.vps.serveraptor.com
  only:
  - master
  before_script:
  - apt update && apt install -y openssh-client
  - mkdir -p ~/.ssh
  - echo -e "Host *\n\tStrictHostKeyChecking no\n\n" > ~/.ssh/config
  - echo "$MASTER_DEPLOYMENT_IDENTITY" > ~/.ssh/id_rsa
  - chmod 600 ~/.ssh/id_rsa
  script:
  - ssh -i ~/.ssh/id_rsa webapp@panel.vps.serveraptor.com ./deploy_webapp.sh
